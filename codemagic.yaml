workflows:
  ios-workflow:
    name: iOS Workflow
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Flutter unit tests
        script: |
          flutter test || true
      - name: ULTRA FORCE - iOS 12.0 + Eliminar -G
        script: |
          # Crear un script que modificar√° TODOS los archivos de configuraci√≥n
          cat > fix_ios_build.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "üî® INICIANDO CORRECCI√ìN FORZADA DE CONFIGURACI√ìN iOS 12.0"
          
          # 1. Actualizar proyecto principal
          echo "üìù Actualizando proyecto principal..."
          find ios -name "*.pbxproj" -exec sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 12.0/g' {} \;
          
          # 2. Actualizar Podfile
          echo "üìù Reemplazando Podfile..."
          cat > ios/Podfile << 'EOT'
          platform :ios, '12.0'
          
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          
          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }
          
          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end
          
            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}"
          end
          
          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          
          flutter_ios_podfile_setup
          
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
          
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            
            post_install do |installer|
              installer.pods_project.targets.each do |target|
                flutter_additional_ios_build_settings(target)
                target.build_configurations.each do |config|
                  config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                  config.build_settings.delete 'ARCHS'
                  config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
                  config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
                end
              end
            end
          end
          EOT
          
          # 3. Limpiar completamente
          echo "üßπ Limpiando entorno..."
          cd ios
          rm -rf Pods
          rm -rf .symlinks
          rm -f Podfile.lock
          
          # 4. Instalar pods
          echo "üì¶ Instalando pods..."
          pod install --repo-update
          cd ..
          
          # 5. B√öSQUEDA Y ELIMINACI√ìN EXHAUSTIVA DE LA OPCI√ìN -G
          echo "üîß ELIMINANDO OPCI√ìN -G DE TODOS LOS ARCHIVOS..."
          
          # Buscar en TODOS los archivos de configuraci√≥n
          find ios -type f $$ -name "*.xcconfig" -o -name "*.pbxproj" -o -name "*.plist" $$ -exec grep -l "\-G" {} \; | while read file; do
            echo "üîß Procesando: $file"
            # Eliminar -G seguido de espacio
            sed -i '' 's/-G / /g' "$file"
            # Eliminar -G al final de l√≠nea
            sed -i '' 's/-G$//g' "$file"
            # Eliminar -G seguido de cualquier car√°cter no alfanum√©rico
            sed -i '' 's/-G$$[^a-zA-Z0-9]$$/ \1/g' "$file"
          done
          
          # 6. Buscar espec√≠ficamente en archivos de pods
          echo "üîß Procesando archivos de Pods..."
          find ios/Pods -type f -name "*.xcconfig" -exec sed -i '' 's/-G / /g' {} \;
          find ios/Pods -type f -name "*.xcconfig" -exec sed -i '' 's/-G$//g' {} \;
          find ios/Pods -type f -name "*.pbxproj" -exec sed -i '' 's/-G / /g' {} \;
          find ios/Pods -type f -name "*.pbxproj" -exec sed -i '' 's/-G$//g' {} \;
          
          # 7. Actualizar versiones de deployment target
          echo "üîß Actualizando deployment targets..."
          find ios/Pods -name "*.xcconfig" -exec sed -i '' 's/-miphoneos-version-min=[0-9]*\.[0-9]*/-miphoneos-version-min=12.0/g' {} \;
          find ios/Pods -name "*.xcconfig" -exec sed -i '' 's/arm64-apple-ios[0-9]*\.[0-9]*/arm64-apple-ios12.0/g' {} \;
          find ios/Pods -name "*.pbxproj" -exec sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 12.0/g' {} \;
          
          # 8. Verificaci√≥n final
          echo "üîç Verificando que no quede la opci√≥n -G..."
          if grep -r "\-G" ios/ 2>/dev/null; then
            echo "‚ö†Ô∏è A√∫n se encontraron referencias a -G, eliminando..."
            grep -r "\-G" ios/ -l | xargs sed -i '' 's/-G//g'
          else
            echo "‚úÖ No se encontraron referencias a -G"
          fi
          
          echo "‚úÖ CORRECCI√ìN FORZADA COMPLETADA"
          EOF
          
          # Hacer ejecutable el script
          chmod +x fix_ios_build.sh
          
          # Ejecutar el script
          ./fix_ios_build.sh
      - name: POST-INSTALL - Eliminar -G adicional
        script: |
          echo "üîß POST-INSTALACI√ìN: Eliminando cualquier -G restante..."
          
          # Buscar y eliminar CUALQUIER referencia a -G en todo el directorio ios
          find ios -type f $$ -name "*.xcconfig" -o -name "*.pbxproj" $$ -print0 | xargs -0 grep -l "\-G" | while read file; do
            echo "üîß Limpiando: $file"
            sed -i '' 's/-G[[:space:]]*/ /g' "$file"
            sed -i '' 's/-G$//g' "$file"
          done
          
          # Verificaci√≥n final
          echo "üîç Verificaci√≥n final..."
          if find ios -type f $$ -name "*.xcconfig" -o -name "*.pbxproj" $$ -exec grep -l "\-G" {} \; 2>/dev/null; then
            echo "‚ö†Ô∏è A√∫n hay archivos con -G, forzando eliminaci√≥n..."
            find ios -type f $$ -name "*.xcconfig" -o -name "*.pbxproj" $$ -exec sed -i '' 's/-G//g' {} \;
          else
            echo "‚úÖ Todos los archivos est√°n limpios"
          fi
      - name: ULTRA FORCE - Build
        script: |
          # Limpiar Flutter
          flutter clean
          flutter pub get
          
          # Compilar con opciones espec√≠ficas
          FLUTTER_XCODE_ONLY_ACTIVE_ARCH=NO flutter build ios --release --no-codesign
    artifacts:
      - build/ios/iphoneos/Runner.app
      - ios/Pods/Pods.xcodeproj/project.pbxproj
      - ios/Podfile
      - ios/Runner.xcodeproj/project.pbxproj
    publishing:
      email:
        recipients:
          - user@example.com
        notify:
          success: true
          failure: false